{"version":3,"sources":["queries/queries.js","components/BookDetails.js","components/BookList.js","components/AddBook.js","App.js","index.js"],"names":["getAuthorsQuery","gql","_templateObject","getBooksQuery","_templateObject2","getBookQuery","_templateObject3","addBookMutation","_templateObject4","addAuthorMutation","_templateObject5","BookDetails","filterOtherBooks","other","book","id","react_default","a","createElement","key","onClick","_this","props","callBookChange","name","_this2","this","data","author","genre","books","map","displayBookDetails","Component","graphql","options","variables","bookId","BookList","state","selected","loading","e","setState","_this3","Divider","horizontal","displayBooks","components_BookDetails","newBook","AddBook","authorName","authorId","handleInputChange","event","_event$target","target","value","Object","defineProperty","console","log","handleSubmit","preventDefault","authorMatch","checkExistingAuthor","refetchQueries","query","age","update","store","_ref","addAuthor","authorData","authors","filter","Grid","columns","Row","Column","width","Form","Field","inline","Input","onChange","type","list","displayAuthors","Button","circular","size","icon","className","compose","client","ApolloClient","uri","App","react_apollo_browser_umd","components_BookList","components_AddBook","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.8599ff0a.chunk.js","sourcesContent":["import { gql } from 'apollo-boost';\n\nconst getAuthorsQuery = gql`\n    {\n        authors{\n            name\n            id\n        }\n    }\n`;\n\nconst getBooksQuery = gql`\n    {\n        books{\n            name\n            genre\n            id\n            author{\n                name\n                id\n            }\n        }\n    }\n`;\n\nconst getBookQuery = gql`\n    query($id: ID){\n        book(id: $id ){\n            id\n            name\n            genre\n            author{\n                id\n                name\n                age\n                books{\n                    id\n                    name        \n                }\n            }\n        }\n    }\n`\n\nconst addBookMutation = gql`\n    mutation($name: String!, $genre: String!, $authorId: ID!){\n        addBook(name: $name, genre: $genre, authorId: $authorId){\n            name\n            id\n        }\n    }\n\n`;\n\nconst addAuthorMutation = gql`\n    mutation($name: String!, $age: Int!){\n        addAuthor(name: $name, age: $age){\n            name\n            id\n        }\n    }\n`;\n\nexport { getAuthorsQuery, getBooksQuery, getBookQuery, addBookMutation, addAuthorMutation };","import React, { Component } from 'react';\nimport { graphql } from 'react-apollo';\nimport { getBookQuery } from '../queries/queries';\n\n\n\nclass BookDetails extends Component {\n\n    displayBookDetails(){\n        const { book } = this.props.data;\n        if(book){\n            return(\n                <div>\n                    <h2>{book.name}</h2>\n                    <h3>by {book.author.name}</h3>\n                    <p>{book.genre}</p>\n                    <p>Other books by this author:</p>\n                    <ul id=\"other-books-list\">\n                        {book.author.books.map(other => {\n                            return this.filterOtherBooks(other, book);\n                        })}\n                    </ul>\n                </div>\n            )\n        } else {\n            return <div>No book selected...</div>\n        }\n    }\n\n    filterOtherBooks = (other, book) => {\n        if(other.id !== book.id){\n            return <li key={other.id} onClick={() => this.props.callBookChange(other.id)}>{other.name}</li>\n        }\n    }\n\n    render() {\n        return(\n            <div id=\"book-details\">\n                 {this.displayBookDetails()}\n            </div>\n        )\n    }\n}\n\nexport default graphql(getBookQuery, {\n    options: (props) => {\n        return {\n            variables: {\n                id: props.bookId\n            }\n        }\n    }\n})(BookDetails);","import React, { Component } from 'react';\nimport { graphql } from 'react-apollo';\nimport { getBooksQuery } from '../queries/queries';\nimport { Divider } from 'semantic-ui-react';\n\n// components\nimport BookDetails from './BookDetails';\n\n\nclass BookList extends Component {\n\n    state = {\n        selected: null\n    }\n\n    displayBooks(){\n        const data = this.props.data;\n        if(data.loading){\n            return(<div>Loading books...</div>)\n        } else {\n            return data.books.map(book => {\n                return <li key={book.id} onClick={ (e) => this.setState({ selected: book.id })}>{book.name} by {book.author.name}</li>\n            });\n        }\n    }\n\n    render() {\n        return(\n            <div>\n                <div id=\"list-container\">\n                    <Divider horizontal><h1>Your Reading List</h1></Divider>\n                    <ul id=\"book-list\">\n                        {this.displayBooks()}\n                    </ul>\n                </div>\n                <BookDetails bookId={this.state.selected} callBookChange={(newBook) => {this.setState({ selected: newBook })}} />\n            </div>\n        )\n    }\n}\n\nexport default graphql(getBooksQuery)(BookList);","import React, { Component } from 'react';\nimport { graphql, compose } from 'react-apollo';\nimport { Grid, Form, Input, Button } from 'semantic-ui-react';\n\nimport { getAuthorsQuery, addBookMutation, addAuthorMutation, getBooksQuery } from '../queries/queries';\n\nclass AddBook extends Component {\n\n    state = {\n        name: '',\n        genre: '',\n        authorName: '',\n        authorId: ''\n    }\n\n    handleInputChange = event => {\n        const { name, value } = event.target;\n        this.setState({\n            [name]: value\n        });\n        console.log(this.state);\n    }\n\n    displayAuthors(){\n        let authorData = this.props.getAuthorsQuery;\n        if(authorData.loading){\n            return '';\n        } else {\n            return authorData.authors.map(author => {\n                return <option key={author.id} value={author.name}></option>;\n            });\n        }\n    }\n\n    checkExistingAuthor(){\n        let data = this.props.getAuthorsQuery;\n        return data.authors.filter(author => author.name === this.state.authorName);\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n\n        // runs a check to see if the Author's name is already in the database and stores the result in authorMatch.\n        let authorMatch = this.checkExistingAuthor()[0];\n        \n        // if there is a match, create a new book. If not, then a new author will have to be created before the book can be created.\n        if (authorMatch){\n            this.props.addBookMutation({\n                variables: {\n                    name: this.state.name,\n                    genre: this.state.genre,\n                    authorId: authorMatch.id\n                },\n                refetchQueries: [{ query: getBooksQuery }]\n            });\n        } else {\n            \n            // First, I create the new author in the database, then after the new entry is created, the update method\n            // is run afterwards- providing the data we just stored.\n\n            this.props.addAuthorMutation({\n                variables: {\n                    name: this.state.authorName,\n                    age: 0\n                },\n                update: (store, { data: author }) => {\n                    \n                    // After making the new author entry, the new author's ID is returned at author.addAuthor.id\n                    // We then add the new book entry, using the author ID returned to us via \"update\"\n                    console.log(store);\n                    this.props.addBookMutation({\n                        variables: {\n                            name: this.state.name,\n                            genre: this.state.genre,\n                            authorId: author.addAuthor.id\n                        },\n                        refetchQueries: [{ query: getBooksQuery}]\n                    });\n                },\n                refetchQueries: [{query: getAuthorsQuery }]\n            });           \n        }\n\n        \n    }\n\n    render(){\n\n        return(\n\n            <div id=\"add-book\">\n\n                <Grid columns={2}>\n                    <Grid.Row>\n                        <Grid.Column width={10}>\n\n                            <h3>Add New Book:</h3>\n                            <Form>    \n                                <Form.Field inline>\n                                    <label>Title: </label>\n                                    <Input name=\"name\" onChange={this.handleInputChange} type=\"text\"/>\n                                </Form.Field>\n\n                                <Form.Field inline>\n                                    <label>Genre: </label>\n                                    <Input name=\"genre\" onChange={this.handleInputChange} type=\"text\"/>\n                                </Form.Field>\n\n                                <Form.Field>\n                                <label>Author: </label>\n                                <Input name=\"authorName\" onChange={this.handleInputChange} list=\"authors\"/>\n                                    <datalist id=\"authors\">\n                                        {this.displayAuthors()}\n                                    </datalist>\n                                </Form.Field>\n                            </Form>\n                        </Grid.Column>\n\n                        <Grid.Column width={1}>\n\n                            <Button circular size=\"massive\" icon=\"add\" className=\"submit-button\" type=\"submit\" onClick={this.handleSubmit}></Button>\n\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n\n                \n                \n\n            </div>\n        )\n    }\n}\n\nexport default compose(\n    graphql(getAuthorsQuery, { name: \"getAuthorsQuery\" }),\n    graphql(addBookMutation, { name: \"addBookMutation\" }),\n    graphql(addAuthorMutation, { name: \"addAuthorMutation\" })\n)(AddBook);","import React, { Component } from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { Divider } from 'semantic-ui-react';\n\n// Components\nimport BookList from './components/BookList';\nimport AddBook from './components/AddBook';\n\n// apollo client setup\nconst client = new ApolloClient({\n  uri: '/graphql'\n})\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <div id=\"main\">\n          <BookList/>\n          <AddBook/>\n        </div>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}